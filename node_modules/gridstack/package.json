{
  "name": "gridstack",
  "version": "0.2.6",
  "description": "gridstack.js is a jQuery plugin for widget layout",
  "main": "dist/gridstack.js",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/troolee/gridstack.js.git"
  },
  "scripts": {
    "build": "grunt",
    "test": "karma start karma.conf.js"
  },
  "keywords": [
    "gridstack",
    "grid",
    "gridster",
    "layout",
    "jquery"
  ],
  "author": {
    "name": "Pavel Reznikov",
    "email": "pashka.reznikov@gmail.com"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/troolee/gridstack.js/issues"
  },
  "homepage": "http://troolee.github.io/gridstack.js/",
  "dependencies": {
    "jquery": "^3.1.0",
    "jquery-ui": "^1.12.0",
    "lodash": "^4.14.2"
  },
  "devDependencies": {
    "connect": "^3.4.1",
    "coveralls": "^2.11.8",
    "doctoc": "^1.0.0",
    "grunt": "^0.4.5",
    "grunt-cli": "^1.2.0",
    "grunt-contrib-connect": "^0.11.2",
    "grunt-contrib-copy": "^0.8.2",
    "grunt-contrib-cssmin": "^0.14.0",
    "grunt-contrib-jshint": "^1.0.0",
    "grunt-contrib-uglify": "^0.11.1",
    "grunt-contrib-watch": "^0.6.1",
    "grunt-doctoc": "^0.1.1",
    "grunt-jscs": "^2.8.0",
    "grunt-protractor-runner": "^3.2.0",
    "grunt-protractor-webdriver": "^0.2.5",
    "grunt-sass": "^1.1.0",
    "jasmine-core": "^2.4.1",
    "karma": "^1.1.2",
    "karma-coverage": "^1.1.1",
    "karma-coveralls": "^1.1.2",
    "karma-jasmine": "^1.0.2",
    "karma-phantomjs-launcher": "^1.0.0",
    "phantomjs-prebuilt": "^2.1.5",
    "serve-static": "^1.10.2"
  },
  "readme": "gridstack.js\n============\n\n[![Build Status](https://travis-ci.org/troolee/gridstack.js.svg?branch=master)](https://travis-ci.org/troolee/gridstack.js)\n[![Coverage Status](https://coveralls.io/repos/github/troolee/gridstack.js/badge.svg?branch=master)](https://coveralls.io/github/troolee/gridstack.js?branch=master)\n[![Dependency Status](https://david-dm.org/troolee/gridstack.js.svg)](https://david-dm.org/troolee/gridstack.js)\n[![devDependency Status](https://david-dm.org/troolee/gridstack.js/dev-status.svg)](https://david-dm.org/troolee/gridstack.js#info=devDependencies)\n[![Stories in Ready](https://badge.waffle.io/troolee/gridstack.js.png?label=ready&title=Ready)](http://waffle.io/troolee/gridstack.js)\n\ngridstack.js is a jQuery plugin for widget layout. This is drag-and-drop multi-column grid. It allows you to build\ndraggable responsive bootstrap v3 friendly layouts. It also works great with [knockout.js](http://knockoutjs.com), [angular.js](https://angularjs.org) and touch devices.\n\nInspired by [gridster.js](https://github.com/ducksboard/gridster.js). Built with love.\n\nJoin gridstack.js on Slack: https://gridstackjs.troolee.com\n\n[![Slack Status](https://gridstackjs.troolee.com/badge.svg)](https://gridstackjs.troolee.com)\n\n<!-- START doctoc generated TOC please keep comment here to allow auto update -->\n<!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->\n**Table of Contents**  *generated with [DocToc](http://doctoc.herokuapp.com/)*\n\n- [Demo](#demo)\n- [Usage](#usage)\n  - [Requirements](#requirements)\n  - [Install](#install)\n  - [Basic usage](#basic-usage)\n  - [Migrating to v0.2.5](#migrating-to-v025)\n  - [API Documentation](#api-documentation)\n  - [Questions and Answers](#questions-and-answers)\n  - [Touch devices support](#touch-devices-support)\n  - [Use with knockout.js](#use-with-knockoutjs)\n  - [Use with angular.js](#use-with-angularjs)\n  - [Rails integration](#rails-integration)\n  - [Change grid width](#change-grid-width)\n  - [Extra CSS](#extra-css)\n    - [Different grid widths](#different-grid-widths)\n  - [Save grid to array](#save-grid-to-array)\n  - [Load grid from array](#load-grid-from-array)\n  - [Override resizable/draggable options](#override-resizabledraggable-options)\n  - [IE8 support](#ie8-support)\n  - [Use with require.js](#use-with-requirejs)\n  - [Nested grids](#nested-grids)\n  - [Resizing active grid](#resizing-active-grid)\n  - [Using AniJS](#using-anijs)\n- [The Team](#the-team)\n- [Changes](#changes)\n      - [v0.2.6 (Development version)](#v027-dev-development-version)\n      - [v0.2.6 (2016-08-17)](#v026-2016-08-17)\n      - [v0.2.5 (2016-03-02)](#v025-2016-03-02)\n      - [v0.2.4 (2016-02-15)](#v024-2016-02-15)\n      - [v0.2.3 (2015-06-23)](#v023-2015-06-23)\n      - [v0.2.2 (2014-12-23)](#v022-2014-12-23)\n      - [v0.2.1 (2014-12-09)](#v021-2014-12-09)\n      - [v0.2.0 (2014-11-30)](#v020-2014-11-30)\n      - [v0.1.0 (2014-11-18)](#v010-2014-11-18)\n- [License](#license)\n\n<!-- END doctoc generated TOC please keep comment here to allow auto update -->\n\n\nDemo\n====\n\nPlease visit http://troolee.github.io/gridstack.js/ for demo. Or check out [these example](http://troolee.github.io/gridstack.js/demo/).\n\n\nUsage\n=====\n\n## Requirements\n\n* [lodash.js](https://lodash.com) (>= 3.5.0, full build)\n* [jQuery](http://jquery.com) (>= 3.1.0)\n* [jQuery UI](http://jqueryui.com) (>= 1.12.0). Minimum required components: Core, Widget, Mouse, Draggable, Resizable\n* (Optional) [jquery-ui-touch-punch](https://github.com/furf/jquery-ui-touch-punch) for touch-based devices support\n\nNote: You can still use [underscore.js](http://underscorejs.org) (>= 1.7.0) instead of lodash.js\n\n## Install\n\n* Using CDN:\n\n```html\n<link rel=\"stylesheet\" href=\"//cdnjs.cloudflare.com/ajax/libs/gridstack.js/0.2.5/gridstack.min.css\" />\n<script type=\"text/javascript\" src='//cdnjs.cloudflare.com/ajax/libs/gridstack.js/0.2.5/gridstack.min.js'></script>\n```\n\n* Using bower:\n\n```bash\n$ bower install gridstack\n```\n\n* Using npm:\n\n[![NPM version](https://img.shields.io/npm/v/gridstack.svg)](https://www.npmjs.com/package/gridstack)\n\n```bash\n$ npm install gridstack\n```\n\nYou can download files from `dist` directory as well.\n\n## Basic usage\n\n```html\n<div class=\"grid-stack\">\n    <div class=\"grid-stack-item\"\n        data-gs-x=\"0\" data-gs-y=\"0\"\n        data-gs-width=\"4\" data-gs-height=\"2\">\n            <div class=\"grid-stack-item-content\"></div>\n    </div>\n    <div class=\"grid-stack-item\"\n        data-gs-x=\"4\" data-gs-y=\"0\"\n        data-gs-width=\"4\" data-gs-height=\"4\">\n            <div class=\"grid-stack-item-content\"></div>\n    </div>\n</div>\n\n<script type=\"text/javascript\">\n$(function () {\n    var options = {\n        cellHeight: 80,\n        verticalMargin: 10\n    };\n    $('.grid-stack').gridstack(options);\n});\n</script>\n```\n\n## Migrating to v0.2.5\n\nAs of v0.2.5 all methods and parameters are in camel case to respect [JavaScript Style Guide and Coding Conventions](http://www.w3schools.com/js/js_conventions.asp).\nAll old methods and parameters are marked as deprecated and still available but a warning will be displayed in js console. They will be available until v1.0\nwhen they will be completely removed.\n\n## API Documentation\n\nPlease check out `doc/README.md` for more information about gridstack.js API.\n\n## Questions and Answers\n\nPlease feel free to as a questions here in issues, using [Stackoverflow](http://stackoverflow.com/search?q=gridstack) or [Slack chat](https://gridstackjs.troolee.com).\nWe will glad to answer and help you as soon as we can.\n\nAlso please check our FAQ `doc/FAQ.md` before asking in case the answer is already there.\n\n## Touch devices support\n\nPlease use [jQuery UI Touch Punch](https://github.com/furf/jquery-ui-touch-punch) to make jQuery UI Draggable/Resizable\nworking on touch-based devices.\n\n```html\n<script src=\"lodash.min.js\"></script>\n<script src=\"jquery.min.js\"></script>\n<script src=\"jquery-ui.min.js\"></script>\n<script src=\"jquery.ui.touch-punch.min.js\"></script>\n\n<script src=\"gridstack.js\"></script>\n```\n\nAlso `alwaysShowResizeHandle` option may be useful:\n\n```javascript\n$(function () {\n    var options = {\n        alwaysShowResizeHandle: /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)\n    };\n    $('.grid-stack').gridstack(options);\n});\n```\n\n## Use with knockout.js\n\n```javascript\nko.components.register('dashboard-grid', {\n    viewModel: {\n        createViewModel: function (controller, componentInfo) {\n            var ViewModel = function (controller, componentInfo) {\n                var grid = null;\n\n                this.widgets = controller.widgets;\n\n                this.afterAddWidget = function (items) {\n                    if (grid == null) {\n                        grid = $(componentInfo.element).find('.grid-stack').gridstack({\n                            auto: false\n                        }).data('gridstack');\n                    }\n\n                    var item = _.find(items, function (i) { return i.nodeType == 1 });\n                    grid.addWidget(item);\n                    ko.utils.domNodeDisposal.addDisposeCallback(item, function () {\n                        grid.removeWidget(item);\n                    });\n                };\n            };\n\n            return new ViewModel(controller, componentInfo);\n        }\n    },\n    template:\n        [\n            '<div class=\"grid-stack\" data-bind=\"foreach: {data: widgets, afterRender: afterAddWidget}\">',\n            '   <div class=\"grid-stack-item\" data-bind=\"attr: {\\'data-gs-x\\': $data.x, \\'data-gs-y\\': $data.y, \\'data-gs-width\\': $data.width, \\'data-gs-height\\': $data.height, \\'data-gs-auto-position\\': $data.autoPosition}\">',\n            '       <div class=\"grid-stack-item-content\">...</div>',\n            '   </div>',\n            '</div> '\n        ].join('')\n});\n\n$(function () {\n    var Controller = function (widgets) {\n        this.widgets = ko.observableArray(widgets);\n    };\n\n    var widgets = [\n        {x: 0, y: 0, width: 2, height: 2},\n        {x: 2, y: 0, width: 4, height: 2},\n        {x: 6, y: 0, width: 2, height: 4},\n        {x: 1, y: 2, width: 4, height: 2}\n    ];\n\n    ko.applyBindings(new Controller(widgets));\n});\n```\n\nand HTML:\n\n```html\n<div data-bind=\"component: {name: 'dashboard-grid', params: $data}\"></div>\n```\n\nSee examples: [example 1](http://troolee.github.io/gridstack.js/demo/knockout.html), [example 2](http://troolee.github.io/gridstack.js/demo/knockout2.html).\n\n**Notes:** It's very important to exclude training spaces after widget template:\n\n```javascript\ntemplate:\n    [\n        '<div class=\"grid-stack\" data-bind=\"foreach: {data: widgets, afterRender: afterAddWidget}\">',\n        '   <div class=\"grid-stack-item\" data-bind=\"attr: {\\'data-gs-x\\': $data.x, \\'data-gs-y\\': $data.y, \\'data-gs-width\\': $data.width, \\'data-gs-height\\': $data.height, \\'data-gs-auto-position\\': $data.autoPosition}\">',\n        '       ....',\n        '   </div>', // <-- NO SPACE **AFTER** </div>\n        '</div> '    // <-- NO SPACE **BEFORE** </div>\n    ].join('')       // <-- JOIN WITH **EMPTY** STRING\n```\n\nOtherwise `addDisposeCallback` won't work.\n\n\n## Use with angular.js\n\nPlease check [gridstack-angular](https://github.com/kdietrich/gridstack-angular)\n\n\n## Rails integration\n\nFor rails users, integration of gridstack.js and its dependencies can be done through [gridstack-js-rails](https://github.com/randoum/gridstack-js-rails)\n\n\n## Change grid width\n\nTo change grid width (columns count), to addition to `width` option, CSS rules\nfor `.grid-stack-item[data-gs-width=\"X\"]` and  `.grid-stack-item[data-gs-x=\"X\"]` have to be changed accordingly.\n\nFor instance for 3-column grid you need to rewrite CSS to be:\n\n```css\n.grid-stack-item[data-gs-width=\"3\"]  { width: 100% }\n.grid-stack-item[data-gs-width=\"2\"]  { width: 66.66666667% }\n.grid-stack-item[data-gs-width=\"1\"]  { width: 33.33333333% }\n\n.grid-stack-item[data-gs-x=\"2\"]  { left: 66.66666667% }\n.grid-stack-item[data-gs-x=\"1\"]  { left: 33.33333333% }\n```\n\nFor 4-column grid it should be:\n\n```css\n.grid-stack-item[data-gs-width=\"4\"]  { width: 100% }\n.grid-stack-item[data-gs-width=\"3\"]  { width: 75% }\n.grid-stack-item[data-gs-width=\"2\"]  { width: 50% }\n.grid-stack-item[data-gs-width=\"1\"]  { width: 25% }\n\n.grid-stack-item[data-gs-x=\"3\"]  { left: 75% }\n.grid-stack-item[data-gs-x=\"2\"]  { left: 50% }\n.grid-stack-item[data-gs-x=\"1\"]  { left: 25% }\n```\n\nand so on.\n\nHere is a SASS code snipped which can make life easier (Thanks to @ascendantofrain, [#81](https://github.com/troolee/gridstack.js/issues/81)):\n\n```sass\n.grid-stack-item {\n\n    $gridstack-columns: 12;\n\n    @for $i from 1 through $gridstack-columns {\n        &[data-gs-width='#{$i}'] { width: (100% / $gridstack-columns) * $i; }\n        &[data-gs-x='#{$i}'] { left: (100% / $gridstack-columns) * $i; }\n        &.grid-stack-item[data-gs-min-width='#{$i}'] { min-width: (100% / $gridstack-columns) * $i; }\n        &.grid-stack-item[data-gs-max-width='#{$i}'] { max-width: (100% / $gridstack-columns) * $i; }\n    }\n}\n```\n\nOr you can include `gridstack-extra.css`. See below for more details.\n\n## Extra CSS\n\nThere are few extra CSS batteries in `gridstack-extra.css` (`gridstack-extra.min.css`).\n\n### Different grid widths\n\nYou can use other than 12 grid width:\n\n```html\n<div class=\"grid-stack grid-stack-N\">...</div>\n```\n```javascript\n$('.grid-stack').gridstack({width: N});\n```\n\nSee example: [2 grids demo](http://troolee.github.io/gridstack.js/demo/two.html)\n\n## Save grid to array\n\nBecause gridstack doesn't track any kind of user-defined widget id there is no reason to make serialization to be part\nof gridstack API. To serialize grid you can simply do something like this (let's say you store widget id inside `data-custom-id`\nattribute):\n\n```javascript\nvar res = _.map($('.grid-stack .grid-stack-item:visible'), function (el) {\n    el = $(el);\n    var node = el.data('_gridstack_node');\n    return {\n        id: el.attr('data-custom-id'),\n        x: node.x,\n        y: node.y,\n        width: node.width,\n        height: node.height\n    };\n});\nalert(JSON.stringify(res));\n```\n\nSee example: [Serialization demo](http://troolee.github.io/gridstack.js/demo/serialization.html)\n\nYou can also use `onchange` event if you need to save only changed widgets right away they have been changed.\n\n## Load grid from array\n\n```javascript\nvar serialization = [\n    {x: 0, y: 0, width: 2, height: 2},\n    {x: 3, y: 1, width: 1, height: 2},\n    {x: 4, y: 1, width: 1, height: 1},\n    {x: 2, y: 3, width: 3, height: 1},\n    {x: 1, y: 4, width: 1, height: 1},\n    {x: 1, y: 3, width: 1, height: 1},\n    {x: 2, y: 4, width: 1, height: 1},\n    {x: 2, y: 5, width: 1, height: 1}\n];\n\nserialization = GridStackUI.Utils.sort(serialization);\n\nvar grid = $('.grid-stack').data('gridstack');\ngrid.removeAll();\n\n_.each(serialization, function (node) {\n    grid.addWidget($('<div><div class=\"grid-stack-item-content\" /></div>'),\n        node.x, node.y, node.width, node.height);\n});\n```\n\nSee example: [Serialization demo](http://troolee.github.io/gridstack.js/demo/serialization.html)\n\nIf you're using knockout there is no need for such method at all.\n\n## Override resizable/draggable options\n\nYou can override default `resizable`/`draggable` options. For instance to enable other then bottom right resizing handle\nyou can init gridsack like:\n\n```javascript\n$('.grid-stack').gridstack({\n    resizable: {\n        handles: 'e, se, s, sw, w'\n    }\n});\n```\n\nNote: It's not recommended to enable `nw`, `n`, `ne` resizing handles. Their behaviour may be unexpected.\n\n## IE8 support\n\nSupport of IE8 is quite limited and is not a goal at this time. As far as IE8 doesn't support DOM Level 2 I cannot manipulate with\nCSS stylesheet dynamically. As a workaround you can do the following:\n\n- Create `gridstack-ie8.css` for your configuration (sample for grid with cell height of 60px can be found [here](https://gist.github.com/troolee/6edfea5857f4cd73e6f1)).\n- Include this CSS:\n\n```html\n<!--[if lt IE 9]>\n<link rel=\"stylesheet\" href=\"gridstack-ie8.css\"/>\n<![endif]-->\n```\n\n- You can use this python script to generate such kind of CSS:\n\n```python\n#!/usr/bin/env python\n\nheight = 60\nmargin = 20\nN = 100\n\nprint '.grid-stack > .grid-stack-item { min-height: %(height)spx }' % {'height': height}\n\nfor i in range(N):\n\th = height * (i + 1) + margin * i\n\tprint '.grid-stack > .grid-stack-item[data-gs-height=\"%(index)s\"] { height: %(height)spx }' % {'index': i + 1, 'height': h}\n\nfor i in range(N):\n\th = height * (i + 1) + margin * i\n\tprint '.grid-stack > .grid-stack-item[data-gs-min-height=\"%(index)s\"] { min-height: %(height)spx }' % {'index': i + 1, 'height': h}\n\nfor i in range(N):\n\th = height * (i + 1) + margin * i\n\tprint '.grid-stack > .grid-stack-item[data-gs-max-height=\"%(index)s\"] { max-height: %(height)spx }' % {'index': i + 1, 'height': h}\n\nfor i in range(N):\n\th = height * i + margin * i\n\tprint '.grid-stack > .grid-stack-item[data-gs-y=\"%(index)s\"] { top: %(height)spx }' % {'index': i , 'height': h}\n```\n\nThere are at least two more issues with gridstack in IE8 with jQueryUI resizable (it seems it doesn't work) and\ndroppable. If you have any suggestions about support of IE8 you are welcome here: https://github.com/troolee/gridstack.js/issues/76\n\n## Use with require.js\n\nIf you're using require.js and a single file jQueryUI please check out this\n[Stackoverflow question](http://stackoverflow.com/questions/35582945/redundant-dependencies-with-requirejs) to get it\nworking properly.\n\n\n## Nested grids\n\nGridstack may be nested. All nested grids have an additional class `grid-stack-nested` which is assigned automatically\nduring initialization.\nSee example: [Nested grid demo](http://troolee.github.io/gridstack.js/demo/nested.html)\n\n\n## Resizing active grid\n\nResizing on-the-fly is possible, though experimental. This may be used to make gridstack responsive. gridstack will change the total number of columns and will attempt to update the width and x values of each widget to be more logical.\nSee example: [Responsive grid demo](http://troolee.github.io/gridstack.js/demo/responsive.html)\n\n## Using AniJS\n\nUsing AniJS with gridstack is a breeze. In the following example, a listener is added that gets triggered by a widget being added.\nSee widgets wiggle! [AniJS demo](http://troolee.github.io/gridstack.js/demo/anijs.html)\n\nThe Team\n========\n\ngridstack.js is currently maintained by [Pavel Reznikov](https://github.com/troolee), [Dylan Weiss](https://github.com/radiolips)\nand [Kevin Dietrich](https://github.com/kdietrich). And we appreciate [all contributors](https://github.com/troolee/gridstack.js/graphs/contributors)\nfor help.\n\n\nChanges\n=======\n\n#### v0.2.6 (2016-08-17)\n\n- update requirements to the latest versions of jQuery (v3.1.0+) and jquery-ui (v1.12.0+).\n- fix jQuery `size()` ([#486](https://github.com/troolee/gridstack.js/issues/486)).\n- update `destroy([detachGrid])` call ([#422](https://github.com/troolee/gridstack.js/issues/422)).\n- don't mutate options when calling `draggable` and `resizable`. ([#505](https://github.com/troolee/gridstack.js/issues/505)).\n- update _notify to allow detach ([#411](https://github.com/troolee/gridstack.js/issues/411)).\n- fix code that checks for jquery-ui ([#481](https://github.com/troolee/gridstack.js/issues/481)).\n- fix `cellWidth` calculation on empty grid\n\n#### v0.2.5 (2016-03-02)\n\n- update names to respect js naming convention.\n- `cellHeight` and `verticalMargin` can now be string (e.g. '3em', '20px') (Thanks to @jlowcs).\n- add `maxWidth`/`maxHeight` methods.\n- add `enableMove`/`enableResize` methods.\n- fix window resize issue #331.\n- add options `disableDrag` and `disableResize`.\n- fix `batchUpdate`/`commit` (Thank to @radiolips)\n- remove dependency of FontAwesome\n- RTL support\n- `'auto'` value for `cellHeight` option\n- fix `setStatic` method\n- add `setAnimation` method to API\n- add `setGridWidth` method ([#227](https://github.com/troolee/gridstack.js/issues/227))\n- add `removable`/`removeTimeout` *(experimental)*\n- add `detachGrid` parameter to `destroy` method ([#216](https://github.com/troolee/gridstack.js/issues/216)) (thanks @jhpedemonte)\n- add `useOffset` parameter to `getCellFromPixel` method ([#237](https://github.com/troolee/gridstack.js/issues/237))\n- add `minWidth`, `maxWidth`, `minHeight`, `maxHeight`, `id` parameters to `addWidget` ([#188](https://github.com/troolee/gridstack.js/issues/188))\n- add `added` and `removed` events for when a widget is added or removed, respectively. ([#54](https://github.com/troolee/gridstack.js/issues/54))\n- add `acceptWidgets` parameter. Widgets can now be draggable between grids or from outside *(experimental)*\n\n#### v0.2.4 (2016-02-15)\n\n- fix closure compiler/linter warnings\n- add `static_grid` option.\n- add `min_width`/`min_height` methods (Thanks to @cvillemure)\n- add `destroy` method (Thanks to @zspitzer)\n- add `placeholder_text` option (Thanks to @slauyama)\n- add `handle_class` option.\n- add `make_widget` method.\n- lodash v 4.x support (Thanks to @andrewr88)\n\n#### v0.2.3 (2015-06-23)\n\n- gridstack-extra.css\n- add support of lodash.js\n- add `is_area_empty` method\n- nested grids\n- add `batch_update`/`commit` methods\n- add `update` method\n- allow to override `resizable`/`draggable` options\n- add `disable`/`enable` methods\n- add `get_cell_from_pixel` (thanks to @juchi)\n- AMD support\n- fix nodes sorting\n- improved touch devices support\n- add `always_show_resize_handle` option\n- minor fixes and improvements\n\n#### v0.2.2 (2014-12-23)\n\n- fix grid initialization\n- add `cell_height`/`cell_width` API methods\n- fix boolean attributes (issue #31)\n\n#### v0.2.1 (2014-12-09)\n\n- add widgets locking (issue #19)\n- add `will_it_fit` API method\n- fix auto-positioning (issue #20)\n- add animation (thanks to @ishields)\n- fix `y` coordinate calculation when dragging (issue #18)\n- fix `remove_widget` (issue #16)\n- minor fixes\n\n\n#### v0.2.0 (2014-11-30)\n\n- add `height` option\n- auto-generate css rules (widgets `height` and `top`)\n- add `GridStackUI.Utils.sort` utility function\n- add `remove_all` API method\n- add `resize` and `move` API methods\n- add `resizable` and `movable` API methods\n- add `data-gs-no-move` attribute\n- add `float` option\n- fix default css rule for inner content\n- minor fixes\n\n#### v0.1.0 (2014-11-18)\n\nVery first version.\n\n\nLicense\n=======\n\nThe MIT License (MIT)\n\nCopyright (c) 2014-2016 Pavel Reznikov\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n",
  "readmeFilename": "README.md",
  "_id": "gridstack@0.2.6",
  "_from": "gridstack@"
}
